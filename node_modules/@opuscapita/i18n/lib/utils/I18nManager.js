'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

var _without2 = require('lodash/without');

var _without3 = _interopRequireDefault(_without2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _converters = require('../converters');

var _flat = require('flat');

var _flat2 = _interopRequireDefault(_flat);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Creates and initialize new manager instance.
 * Where:
 *- locale is current locale, 'en' by default
 *- localeBundles is an list with messages for different locales. Each bundle has
 *   the following structure {locales: ['en', 'en-GB], messages: {a: {b: {c: 'some message'}}}
 *- formatInfos is format pattern data
 *- fallbackLocale - fallback locale, 'en' by default
 * (see React Intl Data format)
 */
var _obsoleteConstructor = function _obsoleteConstructor() {
  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';
  var localeBundles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var localeFormattingInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var fallbackLocale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'en';

  if (console) {
    console.log('\nWARNING:\nSuch I18nManager constructor signature is deprecated and will be removed soon!\nInstead of:\n\nnew I18nmanager(locale, localeBundles, localeFormattingInfo, fallbackLocale)\n\nuse the following one:\n\nnew I18nManager({locale, localeFormattingInfo, fallbackLocale})\n\nfor locale bundle registration use \'register\' method\n');
  }

  this.locale = locale;
  this.fallbackLocale = fallbackLocale;
  this.localeFormattingInfo = localeFormattingInfo;

  this.register('default', localeBundles);
};

/**
 * Register translation bundles for specified component
 * @param  {String} component name of the component: 'InputDateField', 'SimMenu'
 * @param  {Array} locale specific message bundle array, where each bundle has
 *   the following structure {locales: ['en', 'en-GB], messages: {a: {b: {c: 'some message'}}}
 * @return {I18NManager} reference to i18n manager instance (method could be used like a builder)
 */
var _obsoleteRegister = function _obsoleteRegister(component) {
  var _this = this;

  var localeBundles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (console) {
    console.log('\nWARNING:\nSuch I18nManager \'register\' method signature is deprecated and its support will be removed soon!\nInstead of using locale bundles sturcture like this:\n\n[\n  {locales: [\'en\'], messages: {yes: \'jes\'}}\n  {locales: [\'de\'], messages: {yes: \'ja\'}}\n]\n\nuse the following structure:\n\n{\n  \'en\': {yes: \'jes\'},\n  \'de\': {yes: \'ja\'}\n}\n');
  }
  if (this.components.indexOf(component) >= 0) {
    // component was added already -> nothing to do
    return this;
  }

  localeBundles.forEach(function (_ref) {
    var _ref$locales = _ref.locales,
        locales = _ref$locales === undefined ? [] : _ref$locales,
        _ref$messages = _ref.messages,
        messages = _ref$messages === undefined ? {} : _ref$messages;

    locales.forEach(function (locale) {
      if (!_this.localeBundles[locale]) {
        _this.localeBundles[locale] = {};
      }
      _this.localeBundles[locale] = _extends({}, _this.localeBundles[locale], (0, _flat2.default)(messages));
    });
  });
  this.components.push(component);

  return this;
};

var createDateConverter = function createDateConverter(formattingInfo) {
  return new _converters.DateConverter(formattingInfo.datePattern);
};

var createDateTimeConverter = function createDateTimeConverter(formattingInfo) {
  return new _converters.DateConverter(formattingInfo.dateTimePattern);
};

var createDecimalNumberConverter = function createDecimalNumberConverter(formattingInfo) {
  var numberGroupingSeparator = null;
  if (formattingInfo.numberGroupingSeparatorUse) {
    numberGroupingSeparator = formattingInfo.numberGroupingSeparator;
  }

  return new _converters.NumberConverter(formattingInfo.numberPattern, numberGroupingSeparator, formattingInfo.numberDecimalSeparator, formattingInfo.numberDecimalSeparatorUseAlways);
};

var createNumberConverter = function createNumberConverter(formattingInfo) {
  var numberGroupingSeparator = null;
  if (formattingInfo.numberGroupingSeparatorUse) {
    numberGroupingSeparator = formattingInfo.numberGroupingSeparator;
  }

  return new _converters.NumberConverter(formattingInfo.integerPattern, numberGroupingSeparator, formattingInfo.numberDecimalSeparator, formattingInfo.numberDecimalSeparatorUseAlways);
};

var _actualConstructor = function _actualConstructor() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === undefined ? 'en' : _ref2$locale,
      _ref2$fallbackLocale = _ref2.fallbackLocale,
      fallbackLocale = _ref2$fallbackLocale === undefined ? 'en' : _ref2$fallbackLocale,
      _ref2$localeFormattin = _ref2.localeFormattingInfo,
      localeFormattingInfo = _ref2$localeFormattin === undefined ? {} : _ref2$localeFormattin;

  this.locale = locale;
  this.fallbackLocale = fallbackLocale;
  this.localeFormattingInfo = localeFormattingInfo;
};

/**
 * Reister locale bundles for the component
 * @param  {String} component     component name
 * @param  {[type]} localeBundles {'en': {'a.b.c': 'abc en message'}, 'de': {'a.b.c': 'abc de message'}}
 * @return {I18nManager}          i18n manager instance
 */
var _actualRegister = function _actualRegister(component, localeBundles) {
  var _this2 = this;

  if (this.components.indexOf(component) >= 0) {
    // component was added already -> nothing to do
    return this;
  }

  if (!localeBundles) {
    // nothing to register
    return this;
  }

  (0, _each3.default)(localeBundles, function (bundle, locale) {
    if (!_this2.localeBundles[locale]) {
      _this2.localeBundles[locale] = {};
    }
    _this2.localeBundles[locale] = _extends({}, _this2.localeBundles[locale], (0, _flat2.default)(bundle));
  });
  this.components.push(component);

  return this;
};

var generateFallbackLocaleList = function generateFallbackLocaleList(locale, fallbackLocale) {
  var result = [locale];
  // we expect that locale could be in form like this 'en-GB'
  var dashIndex = locale.indexOf('-');
  if (dashIndex !== -1) {
    result.push(locale.substring(0, dashIndex));
  }
  // add configured fallbackLocale
  result.push(fallbackLocale);

  // remove duplicates, null and undefined values
  return (0, _without3.default)((0, _uniq3.default)(result), null, undefined);
};

/**
 * Manages i18n for JS applications, which includes:
 * - text localization
 * - data formatting
 *
 * @author Alexander Frolov
 * @author Alexey Sergeev
 */

var I18nManager = function () {
  function I18nManager() {
    var _this3 = this;

    _classCallCheck(this, I18nManager);

    this.register = function (component, localeBundles) {
      if (!(0, _isNil3.default)(localeBundles) && (0, _isArray3.default)(localeBundles) && localeBundles.length > 0 && localeBundles[0].locales && (0, _isArray3.default)(localeBundles[0].locales)) {
        return _obsoleteRegister.bind(_this3, component, localeBundles)();
      }
      return _actualRegister.bind(_this3, component, localeBundles)();
    };

    this.getMessage = function (path) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var locales = generateFallbackLocaleList(_this3.locale, _this3.fallbackLocale);

      var message = undefined;
      for (var localeIndex = 0; localeIndex < locales.length && message === undefined; localeIndex++) {
        message = (0, _get3.default)(_this3.localeBundles[locales[localeIndex]], path);
      }

      if (message === undefined) {
        return path;
      }

      // fill message parameter placeholders with passed values
      (0, _each3.default)(args, function (value, key) {
        if (!(0, _isNil3.default)(value)) {
          message = message.replace(new RegExp('\\{' + key + '\\}', 'g'), value.toString());
        }
      });

      return message;
    };

    this._findFormattingInfo = function () {
      var locales = generateFallbackLocaleList(_this3.locale, _this3.fallbackLocale);

      for (var localeIndex = 0; localeIndex < locales.length; localeIndex++) {
        if (_this3.localeFormattingInfo[locales[localeIndex]]) {
          return _this3.localeFormattingInfo[locales[localeIndex]];
        }
      }

      return _constants.DEFAULT_FORMAT_INFO;
    };

    this.formatDate = function (date) {
      return createDateConverter(_this3._findFormattingInfo()).valueToString(date);
    };

    this.formatDateTime = function (date) {
      return createDateTimeConverter(_this3._findFormattingInfo()).valueToString(date);
    };

    this.formatDecimalNumber = function (number) {
      return createDecimalNumberConverter(_this3._findFormattingInfo()).valueToString(number);
    };

    this.formatDecimalNumberWithPattern = function (number, numberPattern) {
      return createDecimalNumberConverter(_extends({}, _this3._findFormattingInfo(), { numberPattern: numberPattern })).valueToString(number);
    };

    this.formatNumber = function (number) {
      return createNumberConverter(_this3._findFormattingInfo()).valueToString(number);
    };

    this.parseDate = function (string) {
      return createDateConverter(_this3._findFormattingInfo()).stringToValue(string);
    };

    this.parseDecimalNumber = function (string) {
      return createDecimalNumberConverter(_this3._findFormattingInfo()).stringToValue(string);
    };

    this.parseNumber = function (string) {
      return createNumberConverter(_this3._findFormattingInfo()).stringToValue(string);
    };

    this.components = [];
    this.localeBundles = {};

    if (arguments.length === 0 || arguments.length === 1 && ((0, _isNil3.default)(arguments[0]) || (0, _isObject3.default)(arguments[0]))) {
      _actualConstructor.apply(this, arguments);
    } else {
      _obsoleteConstructor.apply(this, arguments);
    }
  }

  /**
   * the following path 'a.b' will be found when locale specific messages are defined
   * in one of the following ways:
   * - {'a.b': "some message"}
   * - {a:
   *     { b: "some message" }
   *   }
   *  Be careful when you define message kyes. Most probably possibility to
   *  define messages as deep nested objects will be depreacted soon. Please,
   *  try to use plain object for all messages without nesting.
   */


  // locale 'de-DE' -> calculated fallback locale 'de' ->
  // passed fallback locale 'en' -> default fomatting info from 'constants.js'


  _createClass(I18nManager, [{
    key: 'dateFormat',
    get: function get() {
      return this._findFormattingInfo().datePattern;
    }
  }]);

  return I18nManager;
}();

exports.default = I18nManager;